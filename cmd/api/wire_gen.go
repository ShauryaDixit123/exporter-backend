// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"context"
	"exporterbackend/internal/common/helper"
	"exporterbackend/internal/common/helper/aws"
	"exporterbackend/internal/configs"
	"exporterbackend/internal/core/services/countriessrv"
	"exporterbackend/internal/core/services/currenciessrv"
	"exporterbackend/internal/core/services/imagessrv"
	"exporterbackend/internal/core/services/orderssrv"
	"exporterbackend/internal/core/services/quotessrv"
	"exporterbackend/internal/core/services/userssrv"
	"exporterbackend/internal/core/services/workflowssrv"
	"exporterbackend/internal/handlers/api/v1"
	"exporterbackend/internal/handlers/api/v1/countries"
	"exporterbackend/internal/handlers/api/v1/currencies"
	"exporterbackend/internal/handlers/api/v1/orders"
	"exporterbackend/internal/handlers/api/v1/quotes"
	"exporterbackend/internal/handlers/api/v1/users"
	"exporterbackend/internal/handlers/api/v1/workflows"
	"exporterbackend/internal/handlers/api/v1/ws"
	"exporterbackend/internal/repositories/pgdb/accountsrepo"
	"exporterbackend/internal/repositories/pgdb/countriesrepo"
	"exporterbackend/internal/repositories/pgdb/currenciesrepo"
	"exporterbackend/internal/repositories/pgdb/imagesrepo"
	"exporterbackend/internal/repositories/pgdb/locationsrepo"
	"exporterbackend/internal/repositories/pgdb/ordersrepo/lineitemsrepo"
	"exporterbackend/internal/repositories/pgdb/ordersrepo/purchaseorderrepo"
	"exporterbackend/internal/repositories/pgdb/ordersrepo/salesorderrepo"
	"exporterbackend/internal/repositories/pgdb/quotesrepo"
	"exporterbackend/internal/repositories/pgdb/rolesrepo"
	"exporterbackend/internal/repositories/pgdb/usersrepo"
	"exporterbackend/internal/repositories/pgdb/workflowrepo"
)

import (
	_ "github.com/doug-martin/goqu/v9/dialect/postgres"
	_ "github.com/jackc/pgx/v4/stdlib"
)

// Injectors from wire.go:

func InitializeApp(appName configs.AppName, pgDbConfig configs.PgDbConfig, logConfig configs.LogConfig, context2 context.Context, s3Cofig configs.S3Config) (*app, error) {
	logger, err := NewLogger(appName, logConfig)
	if err != nil {
		return nil, err
	}
	db, err := NewPgDbInstance(pgDbConfig)
	if err != nil {
		return nil, err
	}
	database := NewGoquInstance(db)
	repository := countriesrepo.New(logger, database)
	service := countriessrv.New(logger, repository)
	handler := countries.NewHandler(logger, service)
	routes := countries.New(handler)
	currenciesrepoRepository := currenciesrepo.New(logger, database)
	currenciessrvService := currenciessrv.New(logger, currenciesrepoRepository)
	currenciesHandler := currencies.NewHandler(logger, currenciessrvService)
	currenciesRoutes := currencies.New(currenciesHandler)
	usersrepoRepository := usersrepo.New(logger, database)
	accountsrepoRepository := accountsrepo.New(logger, database)
	locationsrepoRepository := locationsrepo.New(logger, database)
	userssrvService := userssrv.New(logger, usersrepoRepository, accountsrepoRepository, locationsrepoRepository)
	rolesrepoRepository := rolesrepo.New(logger, database)
	v := NewSocketPoolMap()
	usersHandler := users.NewHandler(logger, userssrvService, rolesrepoRepository, v)
	usersRoutes := users.New(usersHandler)
	workflowrepoRepository := workflowrepo.New(logger, database)
	workflowssrvService := workflowssrv.New(logger, workflowrepoRepository, accountsrepoRepository)
	workflowsHandler := workflows.NewHandler(logger, workflowssrvService)
	workflowsRoutes := workflows.New(workflowsHandler)
	purchaseorderrepoRepository := purchaseorderrepo.New(logger, database)
	lineitemsrepoRepository := lineitemsrepo.New(logger, database)
	salesorderrepoRepository := salesorderrepo.New(logger, database)
	orderssrvService := orderssrv.New(logger, purchaseorderrepoRepository, lineitemsrepoRepository, salesorderrepoRepository, accountsrepoRepository, workflowssrvService)
	ordersHandler := orders.NewHandler(logger, orderssrvService)
	ordersRoutes := orders.New(ordersHandler)
	quotesrepoRepository := quotesrepo.New(logger, database)
	imagesrepoRepository := imagesrepo.New(logger, database)
	s3 := NewS3Session(s3Cofig)
	awsS3 := aws.NewS3(s3Cofig, s3)
	imagessrvService := imagessrv.New(logger, imagesrepoRepository, awsS3)
	quotessrvService := quotessrv.New(logger, quotesrepoRepository, imagessrvService)
	quotesHandler := quotes.NewHandler(logger, quotessrvService, imagessrvService)
	quotesRoutes := quotes.New(quotesHandler)
	helperRepository := helper.NewHelperRepository(logger, rolesrepoRepository)
	routeMiddleware := v1.NewMiddleware(logger, helperRepository, usersrepoRepository)
	wsHandler := ws.NewHandler(logger, v)
	wsRoutes := ws.New(wsHandler)
	v1Routes := v1.New(routes, currenciesRoutes, usersRoutes, workflowsRoutes, ordersRoutes, quotesRoutes, routeMiddleware, wsRoutes)
	engine := NewHttpEngine(v1Routes)
	apiApp := NewApp(engine)
	return apiApp, nil
}
