// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rpc

import (
	"exporterbackend/internal/configs"
	"exporterbackend/internal/core/services/countriessrv"
	"exporterbackend/internal/core/services/currenciessrv"
	"exporterbackend/internal/handlers/rpc/v1/countries"
	"exporterbackend/internal/handlers/rpc/v1/currencies"
	"exporterbackend/internal/repositories/pgdb/countriesrepo"
	"exporterbackend/internal/repositories/pgdb/currenciesrepo"
)

// Injectors from wire.go:

func InitializeApp(appName configs.AppName, pgDbConfig configs.PgDbConfig, logConfig configs.LogConfig) (*app, error) {
	logger, err := NewLogger(appName, logConfig)
	if err != nil {
		return nil, err
	}
	db, err := NewPgDbInstance(pgDbConfig)
	if err != nil {
		return nil, err
	}
	database := NewGoquInstance(db)
	repository := currenciesrepo.New(logger, database)
	service := currenciessrv.New(logger, repository)
	handler := currencies.NewHandler(logger, service)
	countriesrepoRepository := countriesrepo.New(logger, database)
	countriessrvService := countriessrv.New(logger, countriesrepoRepository)
	countriesHandler := countries.NewHandler(logger, countriessrvService)
	server := NewGrpcServer(handler, countriesHandler)
	rpcApp := NewApp(server)
	return rpcApp, nil
}
